@using CBCanteen.Client.Services.Contracts;
@using CBCanteen.Shared.Models.Canteen.Meal;
@using CBCanteen.Shared.Models.Canteen.Menu;
@using CBCanteen.Shared.Models.Canteen.Stats;
@using Microsoft.IdentityModel.Tokens
@using Syncfusion.Blazor.Grids

@inject IStatsService StatsService

<div class="flex space-y-4 flex-col mt-2">
    @foreach (var meals in Meals)
    {
        @if (meals.Menus.IsNullOrEmpty())
        {
            <p>Няма направени поръчки за @meals.Date.ToShortDateString()</p>
        }
        else
        {
            <p>Менюта за @meals.Date</p>
            <SfGrid DataSource="@meals.Menus" AllowSorting="true">
                <GridColumns>
                    <GridColumn Field=@nameof(SingleMenuStats.Quantity) HeaderText="Бройка" Width="100"></GridColumn>
                    <GridColumn Field="Menu.Appetizer" HeaderText="Предястие" Width="150"></GridColumn>
                    <GridColumn Field="Menu.MainDish" HeaderText="Основно ястие" Width="130"></GridColumn>
                    <GridColumn Field="Menu.Dessert" HeaderText="Десерт" Width="120"></GridColumn>
                    <GridColumn Field="Menu.Price" HeaderText="Цена" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
            <p>Свободна консумация за @meals.Date</p>
            <SfGrid DataSource="@meals.Meals" AllowSorting="true">
                <GridColumns>
                    <GridColumn Field=@nameof(SingleMealStats.Quantity) HeaderText="Бройка" Width="100"></GridColumn>
                    <GridColumn Field="Meal.Name" HeaderText="Име" Width="150"></GridColumn>
                    <GridColumn Field="Meal.Weight" HeaderText="Грамаж" Format="d" Width="130"></GridColumn>
                    <GridColumn Field="Meal.UnitPrice" HeaderText="Цена" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
            <p>Всички ястия за @meals.Date</p>
            <SfGrid DataSource="@meals.AllMeals" AllowSorting="true">
                <GridColumns>
                    <GridColumn Field=@nameof(SingleMealStats.Quantity) HeaderText="Бройка" Width="100"></GridColumn>
                    <GridColumn Field="Meal.Name" HeaderText="Име" Width="150"></GridColumn>
                    <GridColumn Field="Meal.Weight" HeaderText="Грамаж" Format="d" Width="130"></GridColumn>
                    <GridColumn Field="Meal.UnitPrice" HeaderText="Цена" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        }
    }
</div>

@code{

    [Parameter] 
    public DateTime StartTime { get; set; }

    [Parameter] 
    public DateTime EndTime { get; set; }

    [Parameter] 
    public EventCallback<DateTime> StartTimeChanged { get; set; }

    [Parameter] 
    public EventCallback<DateTime> EndTimeChanged { get; set; }

    private List<MealStats> Meals { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (StartTime > EndTime)
        {
            return;
        }
        
        Meals = await StatsService.GetMealInRangeAsync(DateOnly.FromDateTime(StartTime), DateOnly.FromDateTime(EndTime));
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (StartTime > EndTime)
        {
            return;
        }
        
        Meals = await StatsService.GetMealInRangeAsync(DateOnly.FromDateTime(StartTime), DateOnly.FromDateTime(EndTime));
    }

}